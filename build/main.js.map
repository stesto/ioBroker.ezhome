{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as utils from \"@iobroker/adapter-core\";\nimport * as ws from \"websocket\";\n\nclass Ezhome extends utils.Adapter {\n    devices: Record<string, EzHomeDevice> = {};\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"ezhome\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.setObjectNotExists(\"deviceIPs\", {\n            type: \"state\",\n            common: {\n                read: true,\n                write: true,\n                role: \"list\",\n                name: \"IP-Addresses\",\n                type: \"string\",\n            },\n            native: {},\n        });\n\n        this.getStateAsync(\"deviceIPs\").then((state) => {\n            const ipRegex = /(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/g;\n            const ips = `${state?.val}`.match(ipRegex);\n\n            if (ips === null) {\n                this.log.error(\"No IPs found\");\n                return;\n            }\n\n            this.log.debug(`Found IPs: ${ips.join(\", \")}`);\n\n            for (const ip of ips) {\n                const dev = new EzHomeDevice(this, ip, ip.split(\".\")[3]);\n                this.devices[dev.id] = dev;\n                dev.connect();\n            }\n\n            this.setState(\"deviceIPs\", ips.join(\"\\n\"), true);\n            this.setState(\"info.connection\", true, true);\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.setState(\"info.connection\", false, true);\n            for (const devId in this.devices) {\n                const dev = this.devices[devId];\n                dev.shutdown();\n                this.clearInterval(dev.heartbeatInterval);\n            }\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (!state || state.ack) return;\n        // if (!this.wsConnection.connected) {\n        //     this.log.debug(\"[ws] no client connected. Skip sending values\");\n        //     return;\n        // }\n        const stateIdSplit = id.replace(`${this.namespace}.`, \"\").split(\".\");\n        const devId = stateIdSplit[0];\n        stateIdSplit.shift(); // removes id\n        this.devices[devId].stateChanged(stateIdSplit, state.val);\n\n        // const idSplit: string[] = id.split(\".\");\n        // const obj: any = {};\n        // obj[idSplit[idSplit.length - 1]] = state.val;\n        // const arr = [{ i: Number(idSplit[idSplit.length - 2]), s: obj }];\n        // // this.log.debug(JSON.stringify(arr));\n        // this.wsConnection.sendUTF(JSON.stringify(arr));\n\n        // this.log.debug(\"[ws] send new state values\");\n    }\n}\n\nclass EzHomeDevice {\n    ezHome: Ezhome;\n    public ip: string;\n    public id: string;\n\n    public wsClient!: ws.client;\n    public wsConnection!: ws.connection;\n    public heartbeatInterval!: ioBroker.Interval;\n\n    private shouldShutdown = false;\n\n    public constructor(ezHome: Ezhome, ip: string, id: string) {\n        this.ezHome = ezHome;\n        this.ip = ip;\n        this.id = id;\n    }\n\n    public getUrl(): string {\n        return `ws://${this.ip}/ws`;\n    }\n\n    public connect(): void {\n        this.wsClient = new ws.client();\n\n        this.wsClient.on(\"connectFailed\", this.onWsError);\n        this.wsClient.on(\"connect\", this.onWsConnected);\n\n        this.wsClient.connect(this.getUrl());\n    }\n\n    onWsError = (error: Error): void => {\n        this.ezHome.log.debug(`[ws|${this.id}] connection error: ${error.name} (${error.message})`);\n    };\n\n    onWsConnected = (connection: ws.connection): void => {\n        this.wsConnection = connection;\n        this.ezHome.log.debug(`[ws|${this.id}] connected`);\n\n        connection.on(\"error\", this.onWsError);\n        connection.on(\"close\", this.onWsClose);\n        connection.on(\"message\", this.onWsStateDefinitionsMessage);\n\n        this.heartbeatInterval = this.ezHome.setInterval(() => this.sendHeartbeat(), 5 * 60 * 1000);\n        this.ezHome.log.debug(`[ws|${this.id}] attached connection callbacks`);\n    };\n\n    onWsClose = (_: number, desc: string): void => {\n        this.ezHome.log.debug(`[ws|${this.id}] connection closed: ${desc}`);\n        this.ezHome.clearInterval(this.heartbeatInterval);\n\n        if (!this.shouldShutdown) {\n            this.connect();\n        }\n    };\n\n    sendHeartbeat(): void {\n        if (this.wsConnection) {\n            this.wsConnection.send(\"{}\");\n            this.ezHome.log.debug(`[ws|${this.id}] heartbeat sent`);\n        }\n    }\n\n    onWsStateDefinitionsMessage = (msg: ws.Message): void => {\n        if (msg.type !== \"utf8\") return;\n        this.ezHome.log.debug(`[ws|${this.id}] received state definitions`);\n\n        this.wsConnection.removeListener(\"message\", this.onWsStateDefinitionsMessage);\n        this.wsConnection.on(\"message\", this.onWsStateUpdateMessage);\n\n        const virtualDevices = JSON.parse(msg.utf8Data);\n        for (const virtualDev of virtualDevices) {\n            for (const state of virtualDev.states) {\n                const stateId: string = state.id;\n                delete state.id;\n                const statePath = [this.id, virtualDev.id, stateId].join(\".\");\n\n                this.ezHome.setObjectNotExistsAsync(statePath, {\n                    type: \"state\",\n                    common: state as ioBroker.StateCommon,\n                    native: {},\n                });\n                this.ezHome.subscribeStates(statePath);\n            }\n        }\n    };\n\n    onWsStateUpdateMessage = (msg: ws.Message): void => {\n        if (msg.type !== \"utf8\") return;\n\n        if (msg.utf8Data == \"{}\") {\n            this.handleHeartbeat();\n            return;\n        }\n        // this.log.debug(msg.utf8Data);\n        const devices = JSON.parse(msg.utf8Data);\n\n        for (const device of devices) {\n            for (const state in device.s) {\n                this.ezHome.setState([this.id, device.i, state].join(\".\"), device.s[state], true);\n            }\n        }\n    };\n\n    handleHeartbeat(): void {\n        this.ezHome.log.debug(`[ws|${this.id}] got heartbeat response`);\n    }\n\n    public stateChanged(path: string[], val: ioBroker.StateValue): void {\n        const obj: any = {};\n        obj[path[1]] = val;\n        const arr = [{ i: Number(path[0]), s: obj }];\n        this.wsConnection.sendUTF(JSON.stringify(arr));\n\n        this.ezHome.log.debug(`[ws|${this.id}] sent: ${path.join(\".\")} -> ${val}`);\n    }\n\n    public shutdown(): void {\n        this.shouldShutdown = true;\n        this.wsConnection?.close();\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ezhome(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ezhome())();\n}\n"],
  "mappings": "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",
  "names": []
}
