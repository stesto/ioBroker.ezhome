{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as utils from \"@iobroker/adapter-core\";\nimport * as ws from \"websocket\";\n\nclass Ezhome extends utils.Adapter {\n    wsClient!: ws.client;\n    wsConnection!: ws.connection;\n    heartbeatInterval!: ioBroker.Interval;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"ezhome\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    public onWsError = (error: Error): void => {\n        this.log.debug(\"[ws] connection error: \" + error.name + \" (\" + error.message + \")\");\n    };\n\n    public onWsClose = (_: number, desc: string): void => {\n        this.log.debug(\"[ws] connection closed: \" + desc);\n        this.connectToClient();\n    };\n\n    public onWsStateDefinitionsMessage = (msg: ws.Message): void => {\n        if (msg.type !== \"utf8\") return;\n        this.log.debug(\"[ws] receives state definitions\");\n        // this.wsConnection.removeAllListeners();\n        this.wsConnection.removeListener(\"message\", this.onWsStateDefinitionsMessage);\n        this.wsConnection.on(\"message\", this.onWsStateUpdateMessage);\n\n        const devices = JSON.parse(msg.utf8Data);\n        for (const device of devices) {\n            for (const state of device.states) {\n                const stateId: string = state.id;\n                delete state.id;\n                this.setObjectNotExistsAsync(device.id + \".\" + stateId, {\n                    type: \"state\",\n                    common: state as ioBroker.StateCommon,\n                    native: {},\n                });\n                this.subscribeStates(device.id + \".\" + stateId);\n            }\n        }\n    };\n\n    public onWsStateUpdateMessage = (msg: ws.Message): void => {\n        if (msg.type !== \"utf8\") return;\n\n        if (msg.utf8Data == \"{}\") {\n            this.handleHeartbeat();\n            return;\n        }\n        // this.log.debug(msg.utf8Data);\n        const devices = JSON.parse(msg.utf8Data);\n\n        for (const device of devices) {\n            for (const state in device.s) {\n                this.setState(device.i + \".\" + state, device.s[state], true);\n            }\n        }\n    };\n\n    public sendHeartbeat(): void {\n        if (this.wsConnection) {\n            this.wsConnection.send(\"{}\");\n            this.log.debug(\"[ws] heartbeat sent\");\n        }\n    }\n\n    public handleHeartbeat(): void {\n        this.log.debug(\"[ws] got heartbeat response\");\n    }\n\n    public onWsConnected = (connection: ws.connection): void => {\n        this.wsConnection = connection;\n        this.log.debug(\"[ws] connected\");\n        connection.on(\"error\", this.onWsError);\n        connection.on(\"close\", this.onWsClose);\n        connection.on(\"message\", this.onWsStateDefinitionsMessage);\n        this.clearInterval(this.heartbeatInterval);\n        this.heartbeatInterval = this.setInterval(this.sendHeartbeat.bind(this), 60000);\n        this.log.debug(\"[ws] attached connection callbacks\");\n    };\n\n    public connectToClient(): void {\n        this.wsClient.connect(\"ws://192.168.69.45/ws\");\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter heres\n        this.wsClient = new ws.client();\n\n        this.wsClient.on(\"connectFailed\", this.onWsError);\n        this.wsClient.on(\"connect\", this.onWsConnected);\n        this.log.debug(\"[ws] attached client callbacks\");\n\n        this.connectToClient();\n\n        // Reset the connection indicator during startup\n        // this.setState(\"info.connection\", false, true);\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        // this.log.info(\"config option1: \" + this.config.option1);\n        // this.log.info(\"config option2: \" + this.config.option2);\n\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        // await this.setObjectNotExistsAsync(\"testVariable\", {\n        //     type: \"state\",\n        //     common: {\n        //         name: \"testVariable\",\n        //         type: \"boolean\",\n        //         role: \"indicator\",\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // this.subscribeStates(\"testVariable\");\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates(\"lights.*\");\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates(\"*\");\n\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync(\"testVariable\", true);\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n        // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        // this.log.info(\"check user admin pw iobroker: \" + result);\n\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\n        // this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            this.wsConnection.close();\n            this.clearInterval(this.heartbeatInterval);\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (!state || state.ack) return;\n        if (!this.wsConnection.connected) {\n            this.log.debug(\"[ws] no client connected. Skip sending values\");\n            return;\n        }\n        const idSplit: string[] = id.split(\".\");\n        const obj: any = {};\n        obj[idSplit[idSplit.length - 1]] = state.val;\n        const arr = [{ i: Number(idSplit[idSplit.length - 2]), s: obj }];\n        // this.log.debug(JSON.stringify(arr));\n        this.wsConnection.sendUTF(JSON.stringify(arr));\n\n        this.log.debug(\"[ws] send new state values\");\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ezhome(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ezhome())();\n}\n"],
  "mappings": "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",
  "names": []
}
